const _ = require('lodash');
const getAppHandler = require('../../src/getAppHandler');
const MockAppBuilder = require('../utils/mock_app_builder');
const mockEvent = require('../utils/default_app/mock_event.json');

describe('testing fetch response parsing middleware', () => {
	test('get response code 200 with text content response type', async () => {
		const mockCallback = jest.fn(async (data) => {
			const fetch = data.libs.fetch;
			let url = `https://httpbin.org/status/200`;

			let r = await fetch(url, {
				method: 'GET'
			});
			return r;
		});

		app = new MockAppBuilder().setDefaultActionFunction(mockCallback).build();

		let handler = getAppHandler(app);
		let response = await handler(mockEvent, {});
		expect(response).toBeDefined();
		expect(response.text).toBeDefined();
		expect(_.isFunction(response.text)).toBeFalsy();
		expect(response.text).toBe('');
	});

	test('get response code 200 with json content response type', async () => {
		const mockCallback = jest.fn(async (data) => {
			const fetch = data.libs.fetch;
			let url = `https://httpbin.org/json`;

			let r = await fetch(url, {
				method: 'GET'
			});
			return r;
		});

		app = new MockAppBuilder().setDefaultActionFunction(mockCallback).build();

		let handler = getAppHandler(app);
		let response = await handler(mockEvent, {});
		expect(response).toBeDefined();
		expect(response.json).toBeDefined();
		console.log(response.json);
		expect(_.isFunction(response.json)).toBeFalsy();
		// test if json is really a json string
		let json = null;
		try {
			json = JSON.stringify(response.json);
		} catch (e) {
			// fail test - stays null
		}
		expect(json).not.toBe(null);
	});
});
