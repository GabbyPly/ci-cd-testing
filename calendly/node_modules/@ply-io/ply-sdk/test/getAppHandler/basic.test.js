const getAppHandler = require('../../src/getAppHandler');
const MockAppBuilder = require('../utils/mock_app_builder');
const mockEvent = require('../utils/default_app/mock_event.json');

describe('basic lambdaHandler with mocked events, app and actions', () => {
	test('no event method  - returns hello & 200', async () => {
		app = new MockAppBuilder().build();
		let handler = getAppHandler(app);
		let response = await handler({}, {});
		expect(response).not.toBeNull();
		expect(response).toBeDefined();
		expect(response.statusCode).toBe(200);
		expect(response.body).toMatch(/Hello from Lambda!/); // toMatch is like contains. Example: expect('Christoph').toMatch(/stop/);
	});

	test('mock event method - returns success true', async () => {
		app = new MockAppBuilder().build();
		let handler = getAppHandler(app);
		let response = await handler(mockEvent, {});
		expect(response).not.toBeNull();
		expect(response).toBeDefined();
		expect(response.success).toBeTruthy();
	});

	test('action function is called', async () => {
		const mockCallback = jest.fn(() => {
			return {};
		});

		app = new MockAppBuilder().setDefaultActionFunction(mockCallback).build();
		let handler = getAppHandler(app);

		let response = await handler(mockEvent, {});
		expect(response).not.toBeNull();
		expect(response).toBeDefined();
		// mock function:
		// The mock function is called once
		expect(mockCallback.mock.calls.length).toBe(1);
		// The first argument of the first call to the function was not empty
		expect(mockCallback.mock.calls[0][0]).toBeDefined();
		// The return value of the first call to the function was not empty
		expect(mockCallback.mock.results[0].value).toBeDefined();
	});
});
