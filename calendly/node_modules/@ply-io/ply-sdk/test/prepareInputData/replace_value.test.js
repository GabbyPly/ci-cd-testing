const replaceValue = require('../../src/lib/replace-value');
const unflatPreviousVars = require('../../src/lib/unflat-previous-vars');

describe('replace value - unit test', () => {
	const idKey = '4121__order.id';
	const nameKey = '4121__order.name';
	const titleKey = '4121__order.title';
	const urlKey = '4020__mappedFields.url';
	const outputValueUnescapedCharsKey = '4033__translated.output';
	const outputValueRegularCharsKey = '4033__translated.output_esacaped';
	const singleSourceKey = '4121__order.num_of_customers';
	const whiteSpaceSourceKey = '4121__Hello World';
	const nonAlphabeticalKey = '9018__ply_user_matching.$prop_`B}z.id';
	const longMessage =
		'---------- הודעה שהועברה ---------\r\n' +
		'מאת: Test Person <test@test.com>\r\n' +
		'תאריך: יום שלישי, 11 במאי 2021 בשעה 11:56\r\n' +
		'נThis is testr\n' +
		'אל: test@test.com <test@test.com>\r\n' +
		'\r\n' +
		'\r\n' +
		'שלום ,\r\n' +
		'ההזמנה שלי *****-S\r\n' +
		'אני מודיע לך שמספר מעקב החבילות שלי *********\r\n' +
		'<http://www.exampleShipping.com/gb/Tracking?language=english&tracknumbers=*********>\r\n' +
		'הוא\r\n' +
		'בכפוף מכס בסך ** € נוסף ברצוני לדעת\r\n' +
		'מדוע עלי לשלם עמלות אלה כאשר כתוב כי האגרה עבור\r\n' +
		'המשלוח בחינם לבבי\r\n' +
		'Who am i!\r\n' +
		'\r\n';
	const previousVars = {
		[urlKey]: 'https://www.ply.io/',
		[idKey]: '1',
		[nameKey]: 'name of order',
		'4121__order.url': 'https://www.example.org/orders/1/',
		[titleKey]: 'this is the title of the order',
		'4121__order.line_items.0.code': 'code_0',
		'4121__order.line_items.0.name': 'name_0',
		'4121__order.line_items.0.value': 'value_0',
		'4121__order.line_items.1.code': 'code_1',
		'4121__order.line_items.1.name': 'name_1',
		'4121__order.line_items.1.value': 'value_1',
		'4121__order.line_items.2.code': 'code_2',
		'4121__order.line_items.2.name': 'name_2',
		'4121__order.line_items.2.value': 'value_2',
		'4121__order.line_items.3.code': 'code_3',
		'4121__order.line_items.3.name': 'name_3',
		'4121__order.line_items.3.value': 'value_3',
		[outputValueUnescapedCharsKey]: longMessage,
		[outputValueRegularCharsKey]: 'This is a regular string!',
		[singleSourceKey]: 52,
		[whiteSpaceSourceKey]: 'Foo bar',
		[nonAlphabeticalKey]: '59a61a44-de4a-480e-97de-c267c3a0c123'
	};
	const unflattenPreviousVars = unflatPreviousVars(previousVars);

	const runReplaceValue = (value) => replaceValue(value, previousVars, unflattenPreviousVars, null);

	test('value is one param', () => {
		let value = `{{${nameKey}}}`;
		value = runReplaceValue(value);
		const expectedValue = `${previousVars[nameKey]}`;
		expect(value).toBeDefined();
		expect(value).toEqual(expectedValue);
	});
	test('value with one param', () => {
		let value = `You know some the name of the order is {{${nameKey}}}.`;
		value = runReplaceValue(value);
		const expectedValue = `You know some the name of the order is ${previousVars[nameKey]}.`;
		expect(value).toBeDefined();
		expect(value).toEqual(expectedValue);
	});

	test('value with two params', () => {
		let value = `You know some the name of the order is {{${nameKey}}}.\nOn the other hand, the title is {{${titleKey}}}.`;
		value = runReplaceValue(value);
		const expectedValue = `You know some the name of the order is ${previousVars[nameKey]}.\nOn the other hand, the title is ${previousVars[titleKey]}.`;
		expect(value).toBeDefined();
		expect(value).toEqual(expectedValue);
	});

	test('value with three params', () => {
		let value = `You know some the name of the order is {{${nameKey}}}.\nOn the other hand, the title is {{${titleKey}}}.\nFor all of this, the id is {{${idKey}}}.`;
		value = runReplaceValue(value);
		const expectedValue = `You know some the name of the order is ${previousVars[nameKey]}.\nOn the other hand, the title is ${previousVars[titleKey]}.\nFor all of this, the id is ${previousVars[idKey]}.`;
		expect(value).toBeDefined();
		expect(value).toEqual(expectedValue);
	});

	test('value with four params (including mappedField param)', () => {
		let value = `You know some the name of the order is {{${nameKey}}}.\nOn the other hand, the title is {{${titleKey}}}.\nFor all of this, the id is {{${idKey}}}.\nURL is {{${urlKey}}}.`;
		value = runReplaceValue(value);
		const expectedValue = `You know some the name of the order is ${previousVars[nameKey]}.\nOn the other hand, the title is ${previousVars[titleKey]}.\nFor all of this, the id is ${previousVars[idKey]}.\nURL is ${previousVars[urlKey]}.`;
		expect(value).toBeDefined();
		expect(value).toEqual(expectedValue);
	});

	test('value is object', () => {
		let value = [
			{
				id: 'fd75c036-c7e1-43e9-8350-2c52c04efa19',
				maps: {
					0: `what is {{${outputValueUnescapedCharsKey}}}`
				},
				name: 'Text body'
			},
			{
				id: 'd6cf5b3d-d344-4fa0-ab14-87cf43a816ba',
				maps: {
					0: `this is {{${outputValueRegularCharsKey}}}`
				},
				name: 'Language'
			}
		];
		value = runReplaceValue(value);
		const expectedValue = [
			{
				id: 'fd75c036-c7e1-43e9-8350-2c52c04efa19',
				maps: {
					0: `what is ${previousVars[outputValueUnescapedCharsKey]}`
				},
				name: 'Text body'
			},
			{
				id: 'd6cf5b3d-d344-4fa0-ab14-87cf43a816ba',
				maps: {
					0: `this is ${previousVars[outputValueRegularCharsKey]}`
				},
				name: 'Language'
			}
		];
		expect(value).toBeDefined();
		expect(value).toEqual(expectedValue);
	});
	test('value is single and numeric', () => {
		let value = `{{${singleSourceKey}}}`;
		value = runReplaceValue(value);
		const expectedValue = previousVars[singleSourceKey];
		expect(value).toBeDefined();
		expect(value).toEqual(expectedValue); // expected to be numeric value
	});
	test('value without param stays same type', () => {
		let value = 6;
		value = runReplaceValue(value);
		const expectedValue = 6;
		expect(value).toBeDefined();
		expect(value).toEqual(expectedValue);
	});
	test('JSON key has whitespaces', () => {
		let value = `{{${whiteSpaceSourceKey}}}`;
		value = runReplaceValue(value);
		const expectedValue = previousVars[whiteSpaceSourceKey];
		expect(value).toBeDefined();
		expect(value).toEqual(expectedValue); // expected to be the actual value.
	});
	test('Key has non alphabetical characters', () => {
		const value = runReplaceValue(`{{${nonAlphabeticalKey}}}`);
		const expectedValue = previousVars[nonAlphabeticalKey];
		expect(value).toBeDefined();
		expect(value).toEqual(expectedValue);
	});
});
