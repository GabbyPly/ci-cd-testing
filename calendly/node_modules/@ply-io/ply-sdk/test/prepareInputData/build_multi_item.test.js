const { PLY_LIST_SOURCE_PARAM } = require('../../src/lib/param-types');
const prepareInputData = require('../../src/lib/prepare-input-data');
const MockAppBuilder = require('../utils/mock_app_builder');

const ACTION_PARAM_LIST_KEY = 'mykey';
const ACTION_PARAM_LIST_MAPPED_PARAM_KEY = 'mappedColumnKey';

const mockActionWithListParam = {
	key: 'fake_multiple_integration',
	noun: 'Fake Multiple',
	title: 'Fake multiple integration',
	type: 'read',
	params: [
		{
			key: ACTION_PARAM_LIST_KEY,
			type: 'list',
			name: 'Sample table param',
			params: [
				{
					key: ACTION_PARAM_LIST_MAPPED_PARAM_KEY,
					name: 'The value the integration will receive',
					type: 'string',
					required: true
				}
			],
			required: true
		}
	],
	// handler: doSomething,
	is_multiple: true
};

const mockActionWithListParamWithoutNestedParams = {
	key: 'fake_multiple_integration_two',
	noun: 'Fake Multiple',
	title: 'Fake multiple integration',
	type: 'read',
	params: [
		{
			key: ACTION_PARAM_LIST_KEY,
			type: 'list',
			name: 'Sample table param',
			params: [],
			required: true
		}
	],
	// handler: doSomething,
	is_multiple: true
};

describe('prepare input data - unit test', () => {
	test('prepare input data output is array', () => {
		const inputData = {
			[ACTION_PARAM_LIST_KEY]: {
				[PLY_LIST_SOURCE_PARAM]: '{{4121__order.line_items}}',
				[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: '{{code}}'
			}
		};
		const previousVars = {
			'4121__order.line_items.0.code': 'code_0',
			'4121__order.line_items.0.name': 'name_0',
			'4121__order.line_items.0.value': 'value_0',
			'4121__order.line_items.1.code': 'code_1',
			'4121__order.line_items.1.name': 'name_1',
			'4121__order.line_items.1.value': 'value_1',
			'4121__order.line_items.2.code': 'code_2',
			'4121__order.line_items.2.name': 'name_2',
			'4121__order.line_items.2.value': 'value_2',
			'4121__order.line_items.3.code': 'code_3',
			'4121__order.line_items.3.name': 'name_3',
			'4121__order.line_items.3.value': 'value_3'
		};
		const app = new MockAppBuilder().addAction(mockActionWithListParam).build();
		const methodName = `actions.${mockActionWithListParam.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		const outputValue = {
			[ACTION_PARAM_LIST_KEY]: [
				{ [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_0' },
				{ [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_1' },
				{ [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_2' },
				{ [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_3' }
			]
		};
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toBeDefined();
		expect(Array.isArray(inputData[ACTION_PARAM_LIST_KEY])).toBeTruthy();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toEqual(expect.arrayContaining(outputValue[ACTION_PARAM_LIST_KEY]));
		expect(inputData[ACTION_PARAM_LIST_KEY]).toHaveLength(4);
	});
	test('prepare input data output is array with multi column params', () => {
		const inputData = {
			[ACTION_PARAM_LIST_KEY]: {
				[PLY_LIST_SOURCE_PARAM]: '{{4121__order.line_items}}',
				[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: '{{code}} is not {{name}}'
			}
		};
		const previousVars = {
			'4121__order.line_items.0.code': 'code_0',
			'4121__order.line_items.0.name': 'name_0',
			'4121__order.line_items.0.value': 'value_0',
			'4121__order.line_items.1.code': 'code_1',
			'4121__order.line_items.1.name': 'name_1',
			'4121__order.line_items.1.value': 'value_1',
			'4121__order.line_items.2.code': 'code_2',
			'4121__order.line_items.2.name': 'name_2',
			'4121__order.line_items.2.value': 'value_2',
			'4121__order.line_items.3.code': 'code_3',
			'4121__order.line_items.3.name': 'name_3',
			'4121__order.line_items.3.value': 'value_3'
		};
		const app = new MockAppBuilder().addAction(mockActionWithListParam).build();
		const methodName = `actions.${mockActionWithListParam.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		const outputValue = {
			[ACTION_PARAM_LIST_KEY]: [
				{ [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_0 is not name_0' },
				{ [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_1 is not name_1' },
				{ [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_2 is not name_2' },
				{ [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_3 is not name_3' }
			]
		};
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toBeDefined();
		expect(Array.isArray(inputData[ACTION_PARAM_LIST_KEY])).toBeTruthy();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toEqual(expect.arrayContaining(outputValue[ACTION_PARAM_LIST_KEY]));
		expect(inputData[ACTION_PARAM_LIST_KEY]).toHaveLength(4);
	});
	test('prepare input data output is array with multi column params and prevVars values', () => {
		const ACTION_PARAM_LIST_MAPPED_PARAM_KEY_2 = 'mappedColumnKey2';
		const envKey = '4120__env.name';
		const inputData = {
			[ACTION_PARAM_LIST_KEY]: {
				[PLY_LIST_SOURCE_PARAM]: '{{4121__order.line_items}}',
				[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: `{{code}} is not {{name}} in env {{${envKey}}}`,
				[ACTION_PARAM_LIST_MAPPED_PARAM_KEY_2]: `{{code}} is not {{name}} in env {{${envKey}}}`
			}
		};
		const previousVars = {
			[envKey]: 'test',
			'4121__order.line_items.0.code': 'code_0',
			'4121__order.line_items.0.name': 'name_0',
			'4121__order.line_items.0.value': 'value_0',
			'4121__order.line_items.1.code': 'code_1',
			'4121__order.line_items.1.name': 'name_1',
			'4121__order.line_items.1.value': 'value_1',
			'4121__order.line_items.2.code': 'code_2',
			'4121__order.line_items.2.name': 'name_2',
			'4121__order.line_items.2.value': 'value_2',
			'4121__order.line_items.3.code': 'code_3',
			'4121__order.line_items.3.name': 'name_3',
			'4121__order.line_items.3.value': 'value_3'
		};
		const app = new MockAppBuilder().addAction(mockActionWithListParam).build();
		const methodName = `actions.${mockActionWithListParam.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		const outputValue = {
			[ACTION_PARAM_LIST_KEY]: [
				{
					[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_0 is not name_0 in env test',
					[ACTION_PARAM_LIST_MAPPED_PARAM_KEY_2]: 'code_0 is not name_0 in env test'
				},
				{
					[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_1 is not name_1 in env test',
					[ACTION_PARAM_LIST_MAPPED_PARAM_KEY_2]: 'code_1 is not name_1 in env test'
				},
				{
					[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_2 is not name_2 in env test',
					[ACTION_PARAM_LIST_MAPPED_PARAM_KEY_2]: 'code_2 is not name_2 in env test'
				},
				{
					[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_3 is not name_3 in env test',
					[ACTION_PARAM_LIST_MAPPED_PARAM_KEY_2]: 'code_3 is not name_3 in env test'
				}
			]
		};
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toBeDefined();
		expect(Array.isArray(inputData[ACTION_PARAM_LIST_KEY])).toBeTruthy();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toEqual(expect.arrayContaining(outputValue[ACTION_PARAM_LIST_KEY]));
		expect(inputData[ACTION_PARAM_LIST_KEY]).toHaveLength(4);
	});
	test('array value with missing source', () => {
		const inputData = {
			[ACTION_PARAM_LIST_KEY]: {
				[PLY_LIST_SOURCE_PARAM]: '{{4121__order.line_items}}',
				[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: ''
			}
		};
		const previousVars = {};
		const app = new MockAppBuilder().addAction(mockActionWithListParam).build();
		const methodName = `actions.${mockActionWithListParam.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		const outputValue = {};
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toBeUndefined();
		expect(Array.isArray(inputData[ACTION_PARAM_LIST_KEY])).toBeFalsy();
		expect(inputData).toEqual(outputValue);
	});
	test('array value without source', () => {
		const inputData = {
			[ACTION_PARAM_LIST_KEY]: {
				[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: ''
			}
		};
		const previousVars = {};
		const app = new MockAppBuilder().addAction(mockActionWithListParam).build();
		const methodName = `actions.${mockActionWithListParam.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		const outputValue = {};
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toBeUndefined();
		expect(Array.isArray(inputData[ACTION_PARAM_LIST_KEY])).toBeFalsy();
		expect(inputData).toEqual(outputValue);
	});
	test('array value with simple data type array', () => {
		const inputData = {
			[ACTION_PARAM_LIST_KEY]: {
				[PLY_LIST_SOURCE_PARAM]: '{{4121__order.products}}',
				[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: ''
			}
		};
		const previousVars = {
			'4121__order.products.0': 12525,
			'4121__order.products.1': 125125
		};
		const app = new MockAppBuilder().addAction(mockActionWithListParam).build();
		const methodName = `actions.${mockActionWithListParam.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		const outputValue = {
			[ACTION_PARAM_LIST_KEY]: [{ [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 12525 }, { [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 125125 }]
		};
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toBeDefined();
		expect(Array.isArray(inputData[ACTION_PARAM_LIST_KEY])).toBeTruthy();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toEqual(expect.arrayContaining(outputValue[ACTION_PARAM_LIST_KEY]));
		expect(inputData[ACTION_PARAM_LIST_KEY]).toHaveLength(2);
	});
	test('array value with simple data type array and two properties in output array', () => {
		const inputData = {
			[ACTION_PARAM_LIST_KEY]: {
				[PLY_LIST_SOURCE_PARAM]: '{{4121__order.products}}',
				[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: '',
				another_property_of_list: ''
			}
		};
		const previousVars = {
			'4121__order.products.0': 12525,
			'4121__order.products.1': 125125
		};
		const app = new MockAppBuilder().addAction(mockActionWithListParam).build();
		const methodName = `actions.${mockActionWithListParam.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		const outputValue = {
			[ACTION_PARAM_LIST_KEY]: [
				{ [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 12525, another_property_of_list: 12525 },
				{ [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 125125, another_property_of_list: 125125 }
			]
		};
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toBeDefined();
		expect(Array.isArray(inputData[ACTION_PARAM_LIST_KEY])).toBeTruthy();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toEqual(expect.arrayContaining(outputValue[ACTION_PARAM_LIST_KEY]));
		expect(inputData[ACTION_PARAM_LIST_KEY]).toHaveLength(2);
	});
	test('array value with simple data type array without properties in output array', () => {
		const inputData = {
			[ACTION_PARAM_LIST_KEY]: {
				[PLY_LIST_SOURCE_PARAM]: '{{4121__order.products}}'
			}
		};
		const previousVars = {
			'4121__order.products.0': 12525,
			'4121__order.products.1': 125125
		};
		const app = new MockAppBuilder().addAction(mockActionWithListParamWithoutNestedParams).build();
		const methodName = `actions.${mockActionWithListParamWithoutNestedParams.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		const outputValue = {
			[ACTION_PARAM_LIST_KEY]: [12525, 125125]
		};
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toBeDefined();
		expect(Array.isArray(inputData[ACTION_PARAM_LIST_KEY])).toBeTruthy();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toEqual(expect.arrayContaining(outputValue[ACTION_PARAM_LIST_KEY]));
		expect(inputData[ACTION_PARAM_LIST_KEY]).toHaveLength(2);
	});
	test('array value with complex data type without properties in output array', () => {
		const inputData = {
			[ACTION_PARAM_LIST_KEY]: {
				[PLY_LIST_SOURCE_PARAM]: '{{4121__order.line_items}}'
			}
		};
		const previousVars = {
			'4121__order.line_items.0.code': 'code_0',
			'4121__order.line_items.0.name': 'name_0',
			'4121__order.line_items.0.value': 'value_0',
			'4121__order.line_items.1.code': 'code_1',
			'4121__order.line_items.1.name': 'name_1',
			'4121__order.line_items.1.value': 'value_1',
			'4121__order.line_items.2.code': 'code_2',
			'4121__order.line_items.2.name': 'name_2',
			'4121__order.line_items.2.value': 'value_2',
			'4121__order.line_items.3.code': 'code_3',
			'4121__order.line_items.3.name': 'name_3',
			'4121__order.line_items.3.value': 'value_3'
		};
		const app = new MockAppBuilder().addAction(mockActionWithListParamWithoutNestedParams).build();
		const methodName = `actions.${mockActionWithListParamWithoutNestedParams.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		const outputValue = {
			[ACTION_PARAM_LIST_KEY]: [
				{ code: 'code_0', name: 'name_0', value: 'value_0' },
				{ code: 'code_1', name: 'name_1', value: 'value_1' },
				{ code: 'code_2', name: 'name_2', value: 'value_2' },
				{ code: 'code_3', name: 'name_3', value: 'value_3' }
			]
		};
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toBeDefined();
		expect(Array.isArray(inputData[ACTION_PARAM_LIST_KEY])).toBeTruthy();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toEqual(expect.arrayContaining(outputValue[ACTION_PARAM_LIST_KEY]));
		expect(inputData[ACTION_PARAM_LIST_KEY]).toHaveLength(4);
	});
});
