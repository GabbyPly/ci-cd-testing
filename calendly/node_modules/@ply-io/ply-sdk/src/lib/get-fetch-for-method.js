const fetch = require('./fetch'); // Our wrapper.
const _ = require('lodash');
const fetchWrap = require('./wrap-fetch');
const methodNameHelper = require('./method-name-helper');
const { logResponse, handleHttpErrors, handleHttpResponseParsing } = require('./middlewares/after');
const { wrapBeforeMiddleware, wrapAfterMiddleware } = require('./middlewares/utils/middleware-wrapper');
// const { logRequestData } = require('./middlewares/before');

const prepareInputData = require('./prepare-input-data');

const addHttpErrorHandler = (app, methodName, defaultAfterMW) => {
	let methodType = methodNameHelper.getRootObjectNameFromName(methodName);
	if (methodType) {
		// [actions.action_name|auth]
		// console.log(methodType);
		const method = _.get(app, methodType);
		if (!method || !method['disable_http_error_handling']) {
			defaultAfterMW.push(handleHttpErrors);
		}
	} else {
		// Always do it anyways
		defaultAfterMW.push(handleHttpErrors);
	}
};

const getFetchForMethod = (app, methodName, data) => {
	const prepareMappedFields = _.get(app, 'prepareMappedFields');

	let _beforeMiddlewares = _.get(app, 'beforeMiddlewares', []);
	let _afterMiddlewares = _.get(app, 'afterMiddlewares', []);
	if (!_.isArray(_beforeMiddlewares)) {
		_beforeMiddlewares = [];
	}
	if (!_.isArray(_afterMiddlewares)) {
		_afterMiddlewares = [];
	}

	const defaultBeforeMW = [
		// This is for manipulating the request. usually for auth.
		// logRequestData
	];

	const defaultAfterMW = [logResponse, handleHttpResponseParsing];
	addHttpErrorHandler(app, methodName, defaultAfterMW);

	// Our custom default middlewares.
	const beforeMiddlewares = defaultBeforeMW.concat(_beforeMiddlewares);
	const afterMiddlewares = defaultAfterMW.concat(_afterMiddlewares);

	const processedBeforeMiddleware = beforeMiddlewares.map((m) => wrapBeforeMiddleware(m)) || [];
	const processedAfterMiddleware = (afterMiddlewares.map((m) => wrapAfterMiddleware(m)) || []).reverse();

	const allMiddlewares = [].concat(processedBeforeMiddleware).concat(processedAfterMiddleware);
	if (data.previousVars && data.input) {
		// Prepare data before execute
		prepareInputData(app, methodName, data.input, data.previousVars, prepareMappedFields);
	}

	if (allMiddlewares && allMiddlewares.length) {
		return fetchWrap(fetch, allMiddlewares, data);
	} else {
		return fetch;
	}
};

module.exports = getFetchForMethod;
