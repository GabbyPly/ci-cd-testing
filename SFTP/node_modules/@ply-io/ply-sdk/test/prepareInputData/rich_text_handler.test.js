const prepareInputData = require('../../src/lib/prepare-input-data');
const MockAppBuilder = require('../utils/mock_app_builder');
const dayjs = require('dayjs');
const customParseFormat = require('dayjs/plugin/customParseFormat');
dayjs.extend(customParseFormat);
const cloneDeep = require('lodash/cloneDeep');
const ACTION_PARAM_KEY = 'mykey';
const STRING_PARAM = 'string';
const MARKDOWN_FORMAT = 'markdown';
const HTML_FORMAT = 'html';

const mockActionWithParamBase = {
	key: 'fake_multiple_integration',
	noun: 'Fake Multiple',
	title: 'Fake multiple integration',
	type: 'read',
	params: [
		{
			key: ACTION_PARAM_KEY,
			type: STRING_PARAM,
			name: 'Sample param',
			format: MARKDOWN_FORMAT,
			required: true
		}
	]
	// handler: doSomething,
};

function getAction(paramFormat = null, paramRequired = true) {
	const action = cloneDeep(mockActionWithParamBase);
	action.params[0].required = paramRequired;
	if (paramFormat) {
		action.params[0].format = paramFormat;
	}
	return action;
}

const orderId = 'testThisIdIsInTheOutput';
const htmlWithoutParam = `<p>Hi,</p>
	<p>I want to see this in <strong>bold</strong>, 
	<span style="color: #AA0000">color</span>, and 
	<span style="font-size: 16px">size</span>.</p>
	<p></p><p>this is a url [http://ply.io]</p>
	<p>thanks,</p><p><div>testThisIdIsInTheOutput</div></p>`;

const html = `<p>Hi,</p>
	<p>I want to see this in <strong>bold</strong>, 
	<span style="color: #AA0000">color</span>, and 
	<span style="font-size: 16px">size</span>.</p>
	<p></p><p>this is a url [http://ply.io]</p>
	<p>thanks,</p><p><div>{{4121__order.id}}</div></p>`;
const markdown = `Hi,
	I want to see this in **bold**, color, and size.

	this is a url [http://ply.io]
	thanks,
	{{4121__order.id}}`;

describe('prepare input data - rich text handler - unit test', () => {
	test('param string, basic', () => {
		const action = {
			key: 'fake_multiple_integration',
			noun: 'Fake Multiple',
			title: 'Fake multiple integration',
			type: 'read',
			params: [
				{
					key: ACTION_PARAM_KEY,
					type: STRING_PARAM,
					name: 'Sample param',
					required: true
				}
			]
			// handler: doSomething,
		};
		const inputData = {
			[ACTION_PARAM_KEY]: htmlWithoutParam
		};
		const previousVars = {};
		const app = new MockAppBuilder().addAction(action).build();
		const methodName = `actions.${action.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeTruthy();
		expect(typeof inputData[ACTION_PARAM_KEY]).toBe('string');
		expect(inputData[ACTION_PARAM_KEY]).toEqual(htmlWithoutParam);
	});

	test('param string basic, with prev steps', () => {
		const action = {
			key: 'fake_multiple_integration',
			noun: 'Fake Multiple',
			title: 'Fake multiple integration',
			type: 'read',
			params: [
				{
					key: ACTION_PARAM_KEY,
					type: STRING_PARAM,
					name: 'Sample param',
					required: true
				}
			]
			// handler: doSomething,
		};
		const inputData = {
			[ACTION_PARAM_KEY]: markdown
		};
		const previousVars = { '4121__order.id': orderId };
		const expectedMarkdown = `Hi,
	I want to see this in **bold**, color, and size.

	this is a url [http://ply.io]
	thanks,
	${orderId}`;

		const app = new MockAppBuilder().addAction(action).build();
		const methodName = `actions.${action.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeTruthy();
		expect(typeof inputData[ACTION_PARAM_KEY]).toBe('string');
		expect(inputData[ACTION_PARAM_KEY]).toEqual(expectedMarkdown);
		expect(inputData[ACTION_PARAM_KEY].includes(orderId)).toBeTruthy();
	});

	test('return markdown, input html', () => {
		const inputData = {
			[ACTION_PARAM_KEY]: html
		};
		const previousVars = {};
		const action = getAction(MARKDOWN_FORMAT);
		const app = new MockAppBuilder().addAction(action).build();
		const methodName = `actions.${action.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeTruthy();
		expect(typeof inputData[ACTION_PARAM_KEY]).toBe('string');
		expect(inputData[ACTION_PARAM_KEY].includes('**')).toBeTruthy();
	});

	test('return markdown, input markdown', () => {
		const inputData = {
			[ACTION_PARAM_KEY]: markdown
		};
		const previousVars = {};
		const action = getAction(MARKDOWN_FORMAT);
		const app = new MockAppBuilder().addAction(action).build();
		const methodName = `actions.${action.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeTruthy();
		expect(typeof inputData[ACTION_PARAM_KEY]).toBe('string');
		expect(inputData[ACTION_PARAM_KEY].includes('**')).toBeTruthy();
	});

	test('return markdown with prev steps, input html', () => {
		const inputData = {
			[ACTION_PARAM_KEY]: html
		};
		const previousVars = { '4121__order.id': orderId };
		const action = getAction(MARKDOWN_FORMAT);
		const app = new MockAppBuilder().addAction(action).build();
		const methodName = `actions.${action.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeTruthy();
		expect(typeof inputData[ACTION_PARAM_KEY]).toBe('string');
		expect(inputData[ACTION_PARAM_KEY].includes(orderId)).toBeTruthy();
		// inputData[ACTION_PARAM_KEY]:
		// Hi,
		//
		// I want to see this in **bold**, color, and size.
		//
		// this is a url \[http://ply.io\]
		//
		// thanks,
		//
		// testThisIdIsInTheOutput
		expect(inputData[ACTION_PARAM_KEY].split(/\r\n|\r|\n/).length).toEqual(9);
	});

	test('return markdown with prev steps, input markdown', () => {
		const inputData = {
			[ACTION_PARAM_KEY]: markdown
		};
		const previousVars = { '4121__order.id': orderId };
		const action = getAction(MARKDOWN_FORMAT);
		const app = new MockAppBuilder().addAction(action).build();
		const methodName = `actions.${action.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeTruthy();
		expect(typeof inputData[ACTION_PARAM_KEY]).toBe('string');
		expect(inputData[ACTION_PARAM_KEY].includes(orderId)).toBeTruthy();
		expect(inputData[ACTION_PARAM_KEY].split(/\r\n|\r|\n/).length).toEqual(6);
	});

	test('return htnl, input html', () => {
		const inputData = {
			[ACTION_PARAM_KEY]: html
		};
		const previousVars = {};
		const action = getAction(HTML_FORMAT);
		const app = new MockAppBuilder().addAction(action).build();
		const methodName = `actions.${action.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeTruthy();
		expect(typeof inputData[ACTION_PARAM_KEY]).toBe('string');
		expect(inputData[ACTION_PARAM_KEY].includes('<strong>')).toBeTruthy();
	});

	test('return html, input markdown', () => {
		const inputData = {
			[ACTION_PARAM_KEY]: markdown
		};
		const previousVars = {};
		const action = getAction(HTML_FORMAT);
		const app = new MockAppBuilder().addAction(action).build();
		const methodName = `actions.${action.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeTruthy();
		expect(typeof inputData[ACTION_PARAM_KEY]).toBe('string');
		expect(inputData[ACTION_PARAM_KEY].includes('<strong>')).toBeTruthy();
	});

	test('return html with prev steps, input html', () => {
		const inputData = {
			[ACTION_PARAM_KEY]: html
		};
		const previousVars = { '4121__order.id': orderId };
		const action = getAction(HTML_FORMAT);
		const app = new MockAppBuilder().addAction(action).build();
		const methodName = `actions.${action.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeTruthy();
		expect(typeof inputData[ACTION_PARAM_KEY]).toBe('string');
		expect(inputData[ACTION_PARAM_KEY].includes(orderId)).toBeTruthy();
		expect(inputData[ACTION_PARAM_KEY].includes('<strong>')).toBeTruthy();
		expect(inputData[ACTION_PARAM_KEY].includes('<span style="color')).toBeTruthy();
		expect(inputData[ACTION_PARAM_KEY].includes('<span style="font-size: 16px">')).toBeTruthy();
	});

	test('return html with prev steps, input markdown', () => {
		const inputData = {
			[ACTION_PARAM_KEY]: markdown
		};
		const previousVars = { '4121__order.id': orderId };
		const action = getAction(HTML_FORMAT);
		const app = new MockAppBuilder().addAction(action).build();
		const methodName = `actions.${action.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeTruthy();
		expect(typeof inputData[ACTION_PARAM_KEY]).toBe('string');
		expect(inputData[ACTION_PARAM_KEY].includes(orderId)).toBeTruthy();
		expect(inputData[ACTION_PARAM_KEY].includes('<strong>')).toBeTruthy();
	});
});
