const { PLY_LIST_SOURCE_PARAM, RAW_DATA_KEY } = require('../../src/lib/param-types/const');
const prepareInputData = require('../../src/lib/prepare-input-data');
const MockAppBuilder = require('../utils/mock_app_builder');

const ACTION_PARAM_LIST_KEY = 'mykey';
const ACTION_PARAM_LIST_MAPPED_PARAM_KEY = 'mappedColumnKey';

const mockActionWithListParamBase = {
	key: 'fake_multiple_integration',
	noun: 'Fake Multiple',
	title: 'Fake multiple integration',
	type: 'read',
	params: [],
	// handler: doSomething,
	is_multiple: true
};

const mockActionParamBase = {
	key: ACTION_PARAM_LIST_KEY,
	type: 'list',
	name: 'Sample table param',
	params: [],
	required: true
};

const listActionParams = [
	{
		key: ACTION_PARAM_LIST_MAPPED_PARAM_KEY,
		name: 'The value the integration will receive',
		type: 'string',
		required: true
	}
];

const mockActionWithListParam = {
	...mockActionWithListParamBase,
	params: [
		{
			...mockActionParamBase,
			params: [...listActionParams]
		}
	]
};

const mockActionWithListParamWithoutNestedParams = {
	...mockActionWithListParamBase,
	key: 'fake_multiple_integration_two',
	params: [
		{
			...mockActionParamBase
		}
	]
};

const mockActionWithListParamOmitRawData = {
	...mockActionWithListParamBase,
	params: [
		{
			...mockActionParamBase,
			params: [...listActionParams],
			omitRawData: true
		}
	]
};

const createARow = (index) => ({ code: `code_${index}`, name: `name_${index}`, value: `value_${index}` });

describe('prepare input data - unit test', () => {
	test('prepare input data output is array', () => {
		const inputData = {
			[ACTION_PARAM_LIST_KEY]: {
				[PLY_LIST_SOURCE_PARAM]: '{{4121__order.line_items}}',
				[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: '{{code}}'
			}
		};

		const previousVars = {
			'4121__order.line_items': [createARow(0), createARow(1), createARow(2), createARow(3)]
		};
		const app = new MockAppBuilder().addAction(mockActionWithListParam).build();
		const methodName = `actions.${mockActionWithListParam.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		const outputValue = {
			[ACTION_PARAM_LIST_KEY]: [
				{ [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_0', [RAW_DATA_KEY]: createARow(0) },
				{ [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_1', [RAW_DATA_KEY]: createARow(1) },
				{ [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_2', [RAW_DATA_KEY]: createARow(2) },
				{ [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_3', [RAW_DATA_KEY]: createARow(3) }
			]
		};
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toBeDefined();
		expect(Array.isArray(inputData[ACTION_PARAM_LIST_KEY])).toBeTruthy();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toEqual(expect.arrayContaining(outputValue[ACTION_PARAM_LIST_KEY]));
		expect(inputData[ACTION_PARAM_LIST_KEY]).toHaveLength(4);
	});
	test('prepare input data output is array with multi column params', () => {
		const inputData = {
			[ACTION_PARAM_LIST_KEY]: {
				[PLY_LIST_SOURCE_PARAM]: '{{4121__order.line_items}}',
				[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: '{{code}} is not {{name}}'
			}
		};

		const previousVars = {
			'4121__order.line_items': [createARow(0), createARow(1), createARow(2), createARow(3)]
		};
		const app = new MockAppBuilder().addAction(mockActionWithListParam).build();
		const methodName = `actions.${mockActionWithListParam.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		const outputValue = {
			[ACTION_PARAM_LIST_KEY]: [
				{ [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_0 is not name_0', [RAW_DATA_KEY]: createARow(0) },
				{ [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_1 is not name_1', [RAW_DATA_KEY]: createARow(1) },
				{ [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_2 is not name_2', [RAW_DATA_KEY]: createARow(2) },
				{ [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_3 is not name_3', [RAW_DATA_KEY]: createARow(3) }
			]
		};
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toBeDefined();
		expect(Array.isArray(inputData[ACTION_PARAM_LIST_KEY])).toBeTruthy();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toEqual(expect.arrayContaining(outputValue[ACTION_PARAM_LIST_KEY]));
		expect(inputData[ACTION_PARAM_LIST_KEY]).toHaveLength(4);
	});
	test('prepare input data output is array with multi column params and prevVars values', () => {
		const ACTION_PARAM_LIST_MAPPED_PARAM_KEY_2 = 'mappedColumnKey2';
		const ACTION_PARAM_LIST_MAPPED_PARAM_KEY_3 = 'mappedColumnKey3';
		const envKey = '4120__env.name';
		const inputData = {
			[ACTION_PARAM_LIST_KEY]: {
				[PLY_LIST_SOURCE_PARAM]: '{{4121__order.line_items}}',
				[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: `{{code}} is not {{name}} in env {{${envKey}}}`,
				[ACTION_PARAM_LIST_MAPPED_PARAM_KEY_2]: `{{code}} is not {{name}} in env {{${envKey}}}`,
				[ACTION_PARAM_LIST_MAPPED_PARAM_KEY_3]: `{{${envKey}}}`
			}
		};

		const previousVars = {
			[envKey]: 'test',
			'4121__order.line_items': [createARow(0), createARow(1), createARow(2), createARow(3)]
		};
		const app = new MockAppBuilder().addAction(mockActionWithListParam).build();
		const methodName = `actions.${mockActionWithListParam.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		const outputValue = {
			[ACTION_PARAM_LIST_KEY]: [
				{
					[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_0 is not name_0 in env test',
					[ACTION_PARAM_LIST_MAPPED_PARAM_KEY_2]: 'code_0 is not name_0 in env test',
					[ACTION_PARAM_LIST_MAPPED_PARAM_KEY_3]: 'test',
					[RAW_DATA_KEY]: createARow(0)
				},
				{
					[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_1 is not name_1 in env test',
					[ACTION_PARAM_LIST_MAPPED_PARAM_KEY_2]: 'code_1 is not name_1 in env test',
					[ACTION_PARAM_LIST_MAPPED_PARAM_KEY_3]: 'test',
					[RAW_DATA_KEY]: createARow(1)
				},
				{
					[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_2 is not name_2 in env test',
					[ACTION_PARAM_LIST_MAPPED_PARAM_KEY_2]: 'code_2 is not name_2 in env test',
					[ACTION_PARAM_LIST_MAPPED_PARAM_KEY_3]: 'test',
					[RAW_DATA_KEY]: createARow(2)
				},
				{
					[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_3 is not name_3 in env test',
					[ACTION_PARAM_LIST_MAPPED_PARAM_KEY_2]: 'code_3 is not name_3 in env test',
					[ACTION_PARAM_LIST_MAPPED_PARAM_KEY_3]: 'test',
					[RAW_DATA_KEY]: createARow(3)
				}
			]
		};
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toBeDefined();
		expect(Array.isArray(inputData[ACTION_PARAM_LIST_KEY])).toBeTruthy();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toEqual(expect.arrayContaining(outputValue[ACTION_PARAM_LIST_KEY]));
		expect(inputData[ACTION_PARAM_LIST_KEY]).toHaveLength(4);
	});
	test('array value with missing source', () => {
		const inputData = {
			[ACTION_PARAM_LIST_KEY]: {
				[PLY_LIST_SOURCE_PARAM]: '{{4121__order.line_items}}',
				[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: ''
			}
		};
		const previousVars = {};
		const app = new MockAppBuilder().addAction(mockActionWithListParam).build();
		const methodName = `actions.${mockActionWithListParam.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		const outputValue = {};
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toBeUndefined();
		expect(Array.isArray(inputData[ACTION_PARAM_LIST_KEY])).toBeFalsy();
		expect(inputData).toEqual(outputValue);
	});
	test('array value without source', () => {
		const inputData = {
			[ACTION_PARAM_LIST_KEY]: {
				[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: ''
			}
		};
		const previousVars = {};
		const app = new MockAppBuilder().addAction(mockActionWithListParam).build();
		const methodName = `actions.${mockActionWithListParam.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		const outputValue = {};
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toBeUndefined();
		expect(Array.isArray(inputData[ACTION_PARAM_LIST_KEY])).toBeFalsy();
		expect(inputData).toEqual(outputValue);
	});
	test('array value with simple data type array', () => {
		const inputData = {
			[ACTION_PARAM_LIST_KEY]: {
				[PLY_LIST_SOURCE_PARAM]: '{{4121__order.products}}',
				[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: '{{value}}'
			}
		};
		const previousVars = {
			'4121__order.products': [12525, 125125]
		};
		const app = new MockAppBuilder().addAction(mockActionWithListParam).build();
		const methodName = `actions.${mockActionWithListParam.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		const outputValue = {
			[ACTION_PARAM_LIST_KEY]: [
				{ [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 12525, [RAW_DATA_KEY]: { value: 12525 } },
				{ [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 125125, [RAW_DATA_KEY]: { value: 125125 } }
			]
		};
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toBeDefined();
		expect(Array.isArray(inputData[ACTION_PARAM_LIST_KEY])).toBeTruthy();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toEqual(expect.arrayContaining(outputValue[ACTION_PARAM_LIST_KEY]));
		expect(inputData[ACTION_PARAM_LIST_KEY]).toHaveLength(2);
	});
	test('array value with simple data type array and two properties in output array', () => {
		const inputData = {
			[ACTION_PARAM_LIST_KEY]: {
				[PLY_LIST_SOURCE_PARAM]: '{{4121__order.products}}',
				[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'hello man, value is {{value}}',
				another_property_of_list: '{{value}}'
			}
		};
		const previousVars = {
			'4121__order.products': [12525, 125125]
		};
		const app = new MockAppBuilder().addAction(mockActionWithListParam).build();
		const methodName = `actions.${mockActionWithListParam.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		const outputValue = {
			[ACTION_PARAM_LIST_KEY]: [
				{
					[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'hello man, value is 12525',
					another_property_of_list: 12525,
					[RAW_DATA_KEY]: { value: 12525 }
				},
				{
					[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'hello man, value is 125125',
					another_property_of_list: 125125,
					[RAW_DATA_KEY]: { value: 125125 }
				}
			]
		};
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toBeDefined();
		expect(Array.isArray(inputData[ACTION_PARAM_LIST_KEY])).toBeTruthy();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toEqual(expect.arrayContaining(outputValue[ACTION_PARAM_LIST_KEY]));
		expect(inputData[ACTION_PARAM_LIST_KEY]).toHaveLength(2);
	});
	test('array value with simple data type array without properties in output array', () => {
		const inputData = {
			[ACTION_PARAM_LIST_KEY]: {
				[PLY_LIST_SOURCE_PARAM]: '{{4121__order.products}}'
			}
		};
		const previousVars = {
			'4121__order.products': [12525, 125125]
		};
		const app = new MockAppBuilder().addAction(mockActionWithListParamWithoutNestedParams).build();
		const methodName = `actions.${mockActionWithListParamWithoutNestedParams.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		const outputValue = {
			[ACTION_PARAM_LIST_KEY]: [{ value: 12525 }, { value: 125125 }]
		};
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toBeDefined();
		expect(Array.isArray(inputData[ACTION_PARAM_LIST_KEY])).toBeTruthy();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toEqual(expect.arrayContaining(outputValue[ACTION_PARAM_LIST_KEY]));
		expect(inputData[ACTION_PARAM_LIST_KEY]).toHaveLength(2);
	});
	test('array value with complex data type without properties in output array', () => {
		const inputData = {
			[ACTION_PARAM_LIST_KEY]: {
				[PLY_LIST_SOURCE_PARAM]: '{{4121__order.line_items}}'
			}
		};
		const previousVars = {
			'4121__order.line_items': [createARow(0), createARow(1), createARow(2), createARow(3)]
		};
		const app = new MockAppBuilder().addAction(mockActionWithListParamWithoutNestedParams).build();
		const methodName = `actions.${mockActionWithListParamWithoutNestedParams.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		const outputValue = {
			[ACTION_PARAM_LIST_KEY]: [createARow(0), createARow(1), createARow(2), createARow(3)]
		};
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toBeDefined();
		expect(Array.isArray(inputData[ACTION_PARAM_LIST_KEY])).toBeTruthy();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toEqual(expect.arrayContaining(outputValue[ACTION_PARAM_LIST_KEY]));
		expect(inputData[ACTION_PARAM_LIST_KEY]).toHaveLength(4);
	});
	test('omitRawData property', () => {
		const inputData = {
			[ACTION_PARAM_LIST_KEY]: {
				[PLY_LIST_SOURCE_PARAM]: '{{4121__order.line_items}}',
				[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: '{{code}}'
			}
		};
		const previousVars = {
			'4121__order.line_items': [createARow(0), createARow(1), createARow(2), createARow(3)]
		};
		const app = new MockAppBuilder().addAction(mockActionWithListParamOmitRawData).build();
		const methodName = `actions.${mockActionWithListParamOmitRawData.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		const outputValue = {
			[ACTION_PARAM_LIST_KEY]: [
				{ [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_0' },
				{ [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_1' },
				{ [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_2' },
				{ [ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 'code_3' }
			]
		};
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toBeDefined();
		expect(Array.isArray(inputData[ACTION_PARAM_LIST_KEY])).toBeTruthy();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toEqual(expect.arrayContaining(outputValue[ACTION_PARAM_LIST_KEY]));
		expect(inputData[ACTION_PARAM_LIST_KEY]).toHaveLength(4);
	});
	test('array value with mixed data type (object and not object) array and one property in output array', () => {
		const inputData = {
			[ACTION_PARAM_LIST_KEY]: {
				[PLY_LIST_SOURCE_PARAM]: '{{4121__order.products}}',
				[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: '{{value}}'
			}
		};
		const previousVars = {
			'4121__order.products': [12525, 125125, { timmy: "livin' a lie" }]
		};
		const app = new MockAppBuilder().addAction(mockActionWithListParam).build();
		const methodName = `actions.${mockActionWithListParam.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		const outputValue = {
			[ACTION_PARAM_LIST_KEY]: [
				{
					[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 12525,
					[RAW_DATA_KEY]: { value: 12525 }
				},
				{
					[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: 125125,
					[RAW_DATA_KEY]: { value: 125125 }
				},
				{
					[ACTION_PARAM_LIST_MAPPED_PARAM_KEY]: { timmy: "livin' a lie" },
					[RAW_DATA_KEY]: { value: { timmy: "livin' a lie" } }
				}
			]
		};
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toBeDefined();
		expect(Array.isArray(inputData[ACTION_PARAM_LIST_KEY])).toBeTruthy();
		expect(inputData[ACTION_PARAM_LIST_KEY]).toEqual(expect.arrayContaining(outputValue[ACTION_PARAM_LIST_KEY]));
		expect(inputData[ACTION_PARAM_LIST_KEY]).toHaveLength(3);
	});
});
