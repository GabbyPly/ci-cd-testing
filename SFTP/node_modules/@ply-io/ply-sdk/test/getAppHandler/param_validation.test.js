const getAppHandler = require('../../src/getAppHandler');
const MockAppBuilder = require('../utils/mock_app_builder');
const MockEventBuilder = require('../utils/mock_event_builder');

describe('integer param validation', () => {
	test('does not throws validation error', async () => {
		// basic action has integer param
		const app = new MockAppBuilder().build();
		// basic event has integer value param
		const mockEvent = new MockEventBuilder().build();
		let handler = getAppHandler(app);

		let response = await handler(mockEvent, {});
		expect(response).toBeDefined();
		expect(response.error).toBeFalsy();
	});

	test('throws validation error', async () => {
		const app = new MockAppBuilder().build();
		const mockEvent = new MockEventBuilder()
			.setDataInput({
				fake_param: 'not a number'
			})
			.build();
		let handler = getAppHandler(app);

		let response = await handler(mockEvent, {});
		expect(response).toBeDefined();
		expect(response.error).toBeTruthy();
		expect(response.errorCode).toBe(400);
		expect(response.message).toMatch(/fake is not a number/);
	});
});

describe('required param validation', () => {
	test('is required with no value', async () => {
		const app = new MockAppBuilder().build();
		const mockEvent = new MockEventBuilder()
			.setDataInput({
				fake_param: ''
			})
			.build();
		let handler = getAppHandler(app);

		let response = await handler(mockEvent, {});
		expect(response).toBeDefined();
		expect(response.error).toBeTruthy();
		expect(response.errorCode).toBe(400);
		expect(response.message).toMatch(/fake is required/);
	});

	test('is required with value of 0', async () => {
		const app = new MockAppBuilder().build();
		const mockEvent = new MockEventBuilder()
			.setDataInput({
				fake_param: 0
			})
			.build();
		let handler = getAppHandler(app);

		let response = await handler(mockEvent, {});
		expect(response).toBeDefined();
		expect(response.error).toBeFalsy();
	});
});
