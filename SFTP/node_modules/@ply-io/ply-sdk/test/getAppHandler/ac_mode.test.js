const getAppHandler = require('../../src/getAppHandler');
const MockAppBuilder = require('../utils/mock_app_builder');
const MockEventBuilder = require('../utils/mock_event_builder');

const sample_data = {
	text: 'something',
	value: 'some-value',
	notMapped: 'this is not mapped'
};

const doSomething = (app) => {
	return { results: [sample_data, sample_data] };
};

const multipleSearchAction = {
	key: 'fake_multiple_integration',
	noun: 'Fake Multiple',
	title: 'Fake multiple integration',
	type: 'search',
	params: [],
	handler: doSomething,
	is_multiple: true,
	ac_mappings: {
		option: 'text',
		value: 'value'
	}
};

describe('runMethodOptions tests with ac mode', () => {
	test('run ac modes', async () => {
		const app = new MockAppBuilder().addAction(multipleSearchAction).build();
		const mockEvent = new MockEventBuilder().setMethod(`actions.${multipleSearchAction.key}.handler`).setAcMode(true).build();

		let handler = getAppHandler(app);
		let response = await handler(mockEvent, {});

		const expectedResults = [
			// notice the mappings
			{ option: 'something', value: 'some-value' },
			{ option: 'something', value: 'some-value' }
		];
		expect(response).not.toBeNull();
		expect(response).toBeDefined();
		expect(response.results).toBeDefined();
		expect(response.results).toEqual(expectedResults);
	});

	test('run ac modes with acMappingsOff, return un mapped', async () => {
		const app = new MockAppBuilder().addAction(multipleSearchAction).build();
		const mockEvent = new MockEventBuilder()
			.setMethod(`actions.${multipleSearchAction.key}.handler`)
			.setAcMode(true)
			.setDataInput({ addFullItem: 'true' }) //testing this
			.build();

		let handler = getAppHandler(app);
		let response = await handler(mockEvent, {});

		const expectedResults = [
			{ option: 'something', value: 'some-value', item: sample_data },
			{ option: 'something', value: 'some-value', item: sample_data }
		]; //mapped and full
		expect(response).not.toBeNull();
		expect(response).toBeDefined();
		expect(response.results).toBeDefined();
		expect(response.results).toEqual(expectedResults);
	});
});
