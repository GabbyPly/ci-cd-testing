const dayjs = require('dayjs');
const customParseFormat = require('dayjs/plugin/customParseFormat');
dayjs.extend(customParseFormat);
const replaceValue = require('../replace-value');

const TIME_FORMAT = 'HH:mm:ss';
const DATE_AND_TIME_PARAM = 'datetime';

const TIME_FORMATS = ['HH:mm', TIME_FORMAT, 'hh:mm:ss a', 'h:mm:ss a', 'hh:mm:ss A', 'h:mm:ss A'];

const handleTime = (value) => {
	for (const format of TIME_FORMATS) {
		const date = dayjs(value, format, true);
		if (date.isValid()) {
			return { date, format };
		}
	}
	throw new Error('Input is not a valid date or time');
};

const dateHandler = (param, input, key, extraData) => {
	const { previousVars, unflattenPreviousVars, prepareMappedFields } = extraData;
	const value = replaceValue(input[key], previousVars, unflattenPreviousVars, prepareMappedFields); // extract source of multi item param
	let isTime = false;
	let timeFormat = TIME_FORMAT;

	if (!value) {
		if (param.required) {
			throw new Error('Date input is empty');
		}
		// if not required and empty its ok
		return;
	}

	let date = dayjs(value);
	if (!date.isValid()) {
		if (param.type === DATE_AND_TIME_PARAM) {
			const { date: dateTmp, format: timeFormatTmp } = handleTime(value);
			isTime = true;
			date = dateTmp;
			timeFormat = timeFormatTmp;
		} else {
			throw new Error('Input is not a valid date');
		}
	}

	if (param.format || isTime) {
		input[key] = date.format(param.format ? param.format : timeFormat);
	} else {
		input[key] = date.toISOString();
	}
};

module.exports = { dateHandler, TIME_FORMATS };
