const flat = require('flat');
const { isObject } = require('lodash');

const unflatPreviousVars = (previousVars) => {
	let newPreviousVars = {};
	for (const [key, value] of Object.entries(previousVars)) {
		newPreviousVars[key.replace('__', '.')] = value; // replaces the first '__' to '.' so a key like this '4291__results.0.name' will become '4291.results.0.name'
	}
	newPreviousVars = Object.assign({}, flat.unflatten(newPreviousVars, { object: true }));
	newPreviousVars = fixFlattenedArays(newPreviousVars); // as long as we have flattened nested arrays we need to unflatten it manually
	return newPreviousVars;
};

/**
 * check if data is a flattened array
 * @param {*} data
 * @returns returns false if data is empty or if value is an array
 */
const isFlattenArray = (data) => {
	if (Object(data) !== data) return false;
	if (Array.isArray(data)) return false;
	return Object.keys(data).every((key, index) => key == index) && Object.keys(data).length > 0;
};

const fixFlattenedArays = (data) => {
	if (isObject(data)) {
		for (const [key, value] of Object.entries(data)) {
			if (isObject(value)) {
				const isArray = Array.isArray(value);
				if (isArray) {
					continue;
				}
				const isValueFlattenArray = isFlattenArray(value);
				data[key] = isValueFlattenArray ? Object.values(value) : fixFlattenedArays(value);
			}
		}
	}
	return data;
};

module.exports = unflatPreviousVars;
