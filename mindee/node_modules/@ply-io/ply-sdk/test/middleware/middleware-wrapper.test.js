const { wrapAfterMiddleware, wrapBeforeMiddleware } = require('../../src/lib/middlewares/utils/middleware-wrapper');
const _ = require('lodash');

describe('testing middleware wrapper', () => {
	const fetchFunc = jest.fn((url, options) => {
		return { url, options };
	});
	let url = 'test://url.com';
	let options = { test: 1 };
	test('before middleware - return all correct params - no change', async () => {
		const func = jest.fn((url, options, data) => {
			return { url, options };
		});

		let middlewareFunc = wrapBeforeMiddleware(func);
		expect(_.isFunction(middlewareFunc)).toBeTruthy();

		let response = await middlewareFunc(url, options, fetchFunc, {});
		expect(response.url).toBeDefined();
		expect(response.url).toBe(url);
		expect(response.options).toBeDefined();
		expect(response.options).toBe(options);
	});

	test('before middleware - return all correct params - with change', async () => {
		const func = jest.fn((url, options, data) => {
			url = 'changed';
			options = { changed: true };
			return { url, options };
		});
		let middlewareFunc = wrapBeforeMiddleware(func);
		expect(_.isFunction(middlewareFunc)).toBeTruthy();

		let response = await middlewareFunc(url, options, fetchFunc, {});
		expect(response.url).toBeDefined();
		expect(response.url).toBe('changed');
		expect(response.options).toBeDefined();
		expect(response.options).toEqual({ changed: true });
	});

	test('after middleware - to be called and return response', async () => {
		const fetchPromise = jest.fn().mockResolvedValue(
			new Promise((resolve, reject) => {
				resolve({ url, options });
			})
		);

		const func = jest.fn((response, url, options, data) => {
			return response; //from fetch {url, options}
		});

		let middlewareFunc = wrapAfterMiddleware(func);
		expect(_.isFunction(middlewareFunc)).toBeTruthy();

		let response = await middlewareFunc(url, options, fetchPromise, {});
		expect(response.url).toBeDefined();
		expect(response.url).toBe(url);
		expect(response.options).toBeDefined();
		expect(response.options).toBe(options);
	});
});
