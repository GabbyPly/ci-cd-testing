const prepareInputData = require('../../src/lib/prepare-input-data');
const MockAppBuilder = require('../utils/mock_app_builder');
const dayjs = require('dayjs');
const customParseFormat = require('dayjs/plugin/customParseFormat');
dayjs.extend(customParseFormat);
const cloneDeep = require('lodash/cloneDeep');
const ACTION_PARAM_KEY = 'mykey';
const DATE_PARAM = 'date';
const DATE_TIME_PARAM = 'datetime';

const mockActionWithParamBase = {
	key: 'fake_multiple_integration',
	noun: 'Fake Multiple',
	title: 'Fake multiple integration',
	type: 'read',
	params: [
		{
			key: ACTION_PARAM_KEY,
			type: 'date',
			name: 'Sample param',
			params: [],
			required: true
		}
	]
	// handler: doSomething,
};

function getAction(paramType, paramFormat = null, paramRequired = true) {
	const action = cloneDeep(mockActionWithParamBase);
	action.params[0].type = paramType;
	action.params[0].required = paramRequired;
	if (paramFormat) {
		action.params[0].format = paramFormat;
	}
	return action;
}

describe('prepare input data - date handler - unit test', () => {
	test('prepare input data output is date, param type date', () => {
		const datetime = '2022-03-29T15:24:03.920Z';
		const inputData = {
			[ACTION_PARAM_KEY]: datetime
		};
		const previousVars = {};
		const action = getAction(DATE_PARAM);
		const app = new MockAppBuilder().addAction(action).build();
		const methodName = `actions.${action.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeTruthy();
		expect(inputData[ACTION_PARAM_KEY]).toEqual(new Date(datetime).toISOString());
	});

	test('prepare input data output is date, param type datetime', () => {
		const datetime = '2022-03-29T15:24:03.920Z';
		const inputData = {
			[ACTION_PARAM_KEY]: datetime
		};
		const previousVars = {};
		const action = getAction(DATE_TIME_PARAM);
		const app = new MockAppBuilder().addAction(action).build();
		const methodName = `actions.${action.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeTruthy();
		expect(inputData[ACTION_PARAM_KEY]).toEqual(new Date(datetime).toISOString());
	});

	test('prepare input data output is date, param type date, formatted', () => {
		const datetime = '2022-03-29T18:24:03.920Z';
		const format = 'YYYY-MM-DD, h:mm:ss a'; //'2022-03-29, 9:24:03 pm'
		const inputData = {
			[ACTION_PARAM_KEY]: datetime
		};
		const previousVars = {};
		const action = getAction(DATE_PARAM, format);
		const app = new MockAppBuilder().addAction(action).build();
		const methodName = `actions.${action.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeTruthy();
		expect(inputData[ACTION_PARAM_KEY]).toEqual(dayjs(datetime).format(format));
	});

	test('prepare input data output is date, param type date, formatted second options', () => {
		const datetime = '2022-03-29T18:24:03.920Z';
		const format = 'MMMM D, YYYY, HH:mm:ss'; //'March 29, 2022, 21:24:03'
		const inputData = {
			[ACTION_PARAM_KEY]: datetime
		};
		const previousVars = {};
		const action = getAction(DATE_PARAM, format);
		const app = new MockAppBuilder().addAction(action).build();
		const methodName = `actions.${action.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeTruthy();
		expect(inputData[ACTION_PARAM_KEY]).toEqual(dayjs(datetime).format(format));
	});

	test('prepare input data output is date, param type datetime, formatted', () => {
		const datetime = '2022-03-29T15:24:03.920Z';
		const format = 'YYYY:MM:DD';
		const inputData = {
			[ACTION_PARAM_KEY]: datetime
		};
		const previousVars = {};
		const action = getAction(DATE_TIME_PARAM, format);
		const app = new MockAppBuilder().addAction(action).build();
		const methodName = `actions.${action.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeTruthy();
		expect(inputData[ACTION_PARAM_KEY]).toEqual('2022:03:29');
	});

	test('prepare input data output is date, param type datetime, not required', () => {
		const inputData = {
			[ACTION_PARAM_KEY]: null
		};
		const previousVars = {};
		const action = getAction(DATE_TIME_PARAM, 'MM-DD-YYYY', false);
		const app = new MockAppBuilder().addAction(action).build();
		const methodName = `actions.${action.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toEqual(null);
	});

	test('prepare input data output is date, param type datetime, parsed input', () => {
		const formattedDateTime = '03-13-1998';
		const inputData = {
			[ACTION_PARAM_KEY]: formattedDateTime
		};
		const previousVars = {};
		const action = getAction(DATE_TIME_PARAM, 'MM-DD-YYYY');
		const app = new MockAppBuilder().addAction(action).build();
		const methodName = `actions.${action.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toEqual(formattedDateTime);
	});

	test('prepare input data output is date, param type datetime, parsed time input', () => {
		const formattedDateTime = '10:00';
		const inputData = {
			[ACTION_PARAM_KEY]: formattedDateTime
		};
		const previousVars = {};
		const action = getAction(DATE_TIME_PARAM, 'HH:mm');
		const app = new MockAppBuilder().addAction(action).build();
		const methodName = `actions.${action.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toEqual(formattedDateTime);
	});

	test('prepare input data output is date, param type datetime, is not exactly formatted', () => {
		const formattedDateTime = '10:003';
		const inputData = {
			[ACTION_PARAM_KEY]: formattedDateTime
		};
		const previousVars = {};
		const action = getAction(DATE_PARAM, 'HH:mm');
		const app = new MockAppBuilder().addAction(action).build();
		const methodName = `actions.${action.key}.handler`;
		expect(() => prepareInputData(app, methodName, inputData, previousVars, [])).toThrow();
	});

	test('prepare input data output is date, param type datetime, parsed time input, from insert data', () => {
		const formattedDateTime = '10:00';
		const inputData = {
			[ACTION_PARAM_KEY]: '{{4121__order.date}}'
		};
		const previousVars = { '4121__order.date': formattedDateTime };
		const action = getAction(DATE_TIME_PARAM, 'HH:mm');
		const app = new MockAppBuilder().addAction(action).build();
		const methodName = `actions.${action.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toEqual(formattedDateTime);
	});

	test('prepare input data output is date, param type datetime, no format, from insert data', () => {
		const formattedDateTime = '10:00:00';
		const inputData = {
			[ACTION_PARAM_KEY]: '{{4121__order.date}}'
		};
		const previousVars = { '4121__order.date': formattedDateTime };
		const action = getAction(DATE_TIME_PARAM);
		const app = new MockAppBuilder().addAction(action).build();
		const methodName = `actions.${action.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toEqual(formattedDateTime);
	});

	test('prepare input data output is date, param type datetime, no format, from insert data, shorter time', () => {
		const formattedDateTime = '10:00';
		const inputData = {
			[ACTION_PARAM_KEY]: '{{4121__order.date}}'
		};
		const previousVars = { '4121__order.date': formattedDateTime };
		const action = getAction(DATE_TIME_PARAM);
		const app = new MockAppBuilder().addAction(action).build();
		const methodName = `actions.${action.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toEqual(formattedDateTime);
	});

	test('prepare input data output is date, param type datetime, has format, from insert data, shorter time', () => {
		const formattedDateTime = '10:00';
		const inputData = {
			[ACTION_PARAM_KEY]: '{{4121__order.date}}'
		};
		const previousVars = { '4121__order.date': formattedDateTime };
		const action = getAction(DATE_TIME_PARAM, 'HH:mm:ss');
		const app = new MockAppBuilder().addAction(action).build();
		const methodName = `actions.${action.key}.handler`;
		prepareInputData(app, methodName, inputData, previousVars, []);
		expect(inputData).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toBeDefined();
		expect(inputData[ACTION_PARAM_KEY]).toEqual('10:00:00');
	});

	test('prepare input data output is date, param type datetime, no format, from insert data, not time', () => {
		const formattedDateTime = '10:006';
		const inputData = {
			[ACTION_PARAM_KEY]: '{{4121__order.date}}'
		};
		const previousVars = { '4121__order.date': formattedDateTime };
		const action = getAction(DATE_TIME_PARAM);
		const app = new MockAppBuilder().addAction(action).build();
		const methodName = `actions.${action.key}.handler`;
		expect(() => prepareInputData(app, methodName, inputData, previousVars, [])).toThrow();
	});
});
