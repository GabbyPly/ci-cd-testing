const { mapResultFromMethod } = require('../../src/lib/helpers');

describe('test helpers', () => {
	test('mapResultFromMethod', async () => {
		const data = {
			results: [
				{
					name: 'name',
					domain: 'domain',
					logo: 'logo'
				},
				{
					name: 'name2',
					domain: 'domain2',
					logo: 'logo2'
				}
			]
		};
		const mapping = {
			option: 'name',
			value: 'domain',
			image: 'logo'
		};
		const mappedData = mapResultFromMethod(mapping, data, { input: {} });
		const expected = {
			results: [
				{
					option: 'name',
					value: 'domain',
					image: 'logo'
				},
				{
					option: 'name2',
					value: 'domain2',
					image: 'logo2'
				}
			]
		};
		expect(mappedData).not.toBeNull();
		expect(mappedData).toBeDefined();
		expect(mappedData.results).toBeDefined();
		expect(mappedData.results.length).toBeDefined();
		expect(mappedData.results.length).toBe(2);
		expect(mappedData).toStrictEqual(expected);
	});

	test('mapResultFromMethod without default mappings (value)', async () => {
		const data = {
			results: [
				{
					name: 'name',
					domain: 'domain',
					logo: 'logo'
				}
			]
		};
		const mapping = {
			option: 'name',
			text: 'domain', // no value mapping
			image: 'logo'
		};
		expect(() => mapResultFromMethod(mapping, data, { input: {} })).toThrow();
	});

	test('mapResultFromMethod without default mappings (option)', async () => {
		const data = {
			results: [
				{
					name: 'name',
					domain: 'domain',
					logo: 'logo'
				}
			]
		};
		const mapping = {
			name: 'name', // no option mapping
			value: 'domain',
			image: 'logo'
		};
		expect(() => mapResultFromMethod(mapping, data, { input: {} })).toThrow();
	});

	test('mapResultFromMethod custom description', async () => {
		const data = {
			results: [
				{
					name: 'name',
					domain: 'domain',
					des: 'this is the description'
				}
			]
		};
		const mapping = {
			option: 'name',
			value: 'domain'
		};
		const input = { input: { ply_custom_description: 'des' } };
		const mappedData = mapResultFromMethod(mapping, data, input);
		const expected = {
			results: [
				{
					option: 'name',
					value: 'domain',
					description: 'this is the description'
				}
			]
		};
		expect(mappedData).not.toBeNull();
		expect(mappedData).toBeDefined();
		expect(mappedData.results).toBeDefined();
		expect(mappedData.results.length).toBeDefined();
		expect(mappedData.results.length).toBe(1);
		expect(mappedData).toStrictEqual(expected);
	});

	test('mapResultFromMethod custom description, object value', async () => {
		const data = {
			results: [
				{
					name: 'name',
					domain: 'domain',
					custom: {
						des: 'this is the description'
					}
				}
			]
		};
		const mapping = {
			option: 'name',
			value: 'domain'
		};
		const input = { input: { ply_custom_description: 'custom.des' } };
		const mappedData = mapResultFromMethod(mapping, data, input);
		const expected = {
			results: [
				{
					option: 'name',
					value: 'domain',
					description: 'this is the description'
				}
			]
		};
		expect(mappedData).not.toBeNull();
		expect(mappedData).toBeDefined();
		expect(mappedData.results).toBeDefined();
		expect(mappedData.results.length).toBeDefined();
		expect(mappedData.results.length).toBe(1);
		expect(mappedData).toStrictEqual(expected);
	});

	test('mapResultFromMethod option function, value const', async () => {
		const data = {
			results: [
				{
					name: 'name',
					domain: 'domain',
					custom: {
						des: 'this is the description'
					}
				}
			]
		};
		const mapping = {
			option: (obj) => obj.name,
			value: 'domain'
		};
		const input = { input: { ply_custom_description: 'custom.des' } };
		const mappedData = mapResultFromMethod(mapping, data, input);
		const expected = {
			results: [
				{
					option: 'name',
					value: 'domain',
					description: 'this is the description'
				}
			]
		};
		expect(mappedData).not.toBeNull();
		expect(mappedData).toBeDefined();
		expect(mappedData.results).toBeDefined();
		expect(mappedData.results.length).toBeDefined();
		expect(mappedData.results.length).toBe(1);
		expect(mappedData).toStrictEqual(expected);
	});

	test('mapResultFromMethod option function, value const but deeper', async () => {
		const data = {
			results: [
				{
					name: { full: 'name', last: 'last', first: 'first' },
					domain: 'domain',
					custom: {
						des: 'this is the description'
					}
				}
			]
		};
		const mapping = {
			option: 'name.full',
			value: (obj) => obj.domain
		};
		const input = { input: { ply_custom_description: 'custom.des' } };
		const mappedData = mapResultFromMethod(mapping, data, input);
		const expected = {
			results: [
				{
					option: 'name',
					value: 'domain',
					description: 'this is the description'
				}
			]
		};
		expect(mappedData).not.toBeNull();
		expect(mappedData).toBeDefined();
		expect(mappedData.results).toBeDefined();
		expect(mappedData.results.length).toBeDefined();
		expect(mappedData.results.length).toBe(1);
		expect(mappedData).toStrictEqual(expected);
	});
});
