const replaceValue = require('../replace-value');
const isObject = require('lodash/isObject');

// copied from @ply-io/data-types npm pkg
const htmlTags = require('html-tags');
const basic = /\s?<!doctype html>|(<html\b[^>]*>|<body\b[^>]*>|<x-[^>]+>)+/i;
const full = new RegExp(htmlTags.map((tag) => `<${tag}\\b[^>]*>`).join('|'), 'i');

const TurndownService = require('turndown');
const turndownService = new TurndownService();

const showdown = require('showdown');
const converter = new showdown.Converter();

const RICH_TEXT_FORMATS = {
	HTML: 'html',
	MARKDOWN: 'markdown'
};

const isHtml = (val) => {
	// We limit it to a reasonable length to improve performance.
	const string = val.trim().slice(0, 1000);
	return basic.test(string) || full.test(string);
};

const textHandler = (param, input, key, extraData) => {
	const { previousVars, unflattenPreviousVars, prepareMappedFields } = extraData;
	let value = input[key];
	value = replaceValue(value, previousVars, unflattenPreviousVars, prepareMappedFields); // extract source of multi item param

	try {
		if (isObject(value)) {
			throw new Error('value should be string type');
		}

		switch (param.format) {
			case RICH_TEXT_FORMATS.HTML:
				if (isHtml(value)) {
					input[key] = value;
				} else {
					input[key] = converter.makeHtml(value);
				}
				break;
			case RICH_TEXT_FORMATS.MARKDOWN:
				if (isHtml(value)) {
					input[key] = turndownService.turndown(value);
				} else {
					input[key] = value;
				}
				break;
			default:
				// basic string param, without format
				// assure we replace the values needed before continuing
				input[key] = value;
				break;
		}
	} catch (err) {
		console.log(err);
	}
};

module.exports = { textHandler, RICH_TEXT_FORMATS };
