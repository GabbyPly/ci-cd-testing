const { AppError } = require('../../errors');

const getDefaultMessage = (status) => {
	let message = '';
	switch (status) {
		case 400:
			message = 'Bad Request';
			break;
		case 401:
			message = 'Unauthorized';
			break;
		case 403:
			message = 'Forbidden';
			break;
		case 404:
			message = 'Not Found';
			break;
		case 500:
			message = 'Internal Server Error';
			break;
		default:
			break;
	}
	return message;
};

const contentTypeHeader = 'Content-Type';
const contentTypesToMessage = {
	'application/json': async function (response) {
		const json = await response.json();
		return JSON.stringify(json);
	},
	'text/': function (response) {
		return response.text();
	}
};

const handleHttpErrors = async function (response) {
	if (response && (response.status < 200 || response.status >= 400)) {
		// Not a valid http status code. throw error
		console.info('throwing for < 200 >= 400');
		let message = response.statusText;
		console.log('message: ', message);
		if (response.headers) {
			let header = response.headers.get(contentTypeHeader);
			if (header) {
				console.log(header);
				for (var type in contentTypesToMessage) {
					if (header.includes(type)) {
						try {
							message = await contentTypesToMessage[type](response);
							console.log(message);
						} catch (err) {
							console.log('err in message evaluation: ', err);
						}
					}
				}
			}
		}

		if (!message) {
			message = getDefaultMessage(response.status);
		}
		throw new AppError(message, response.status);
	}
	return response;
};
module.exports = handleHttpErrors;
